PROJECT(studierstube)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true) # Avoid unneccesary code
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

FILE(TO_CMAKE_PATH "$ENV{ICG_CMAKE_MODULE_PATH}" OT_CMAKE_MODULE_PATH)
SET(CMAKE_MODULE_PATH ${OT_CMAKE_MODULE_PATH})


# specify the lib and dll output folders for win32
IF(WIN32)
   SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${studierstube_SOURCE_DIR}/bin/win32)
   SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${studierstube_SOURCE_DIR}/lib/win32)
   SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${studierstube_SOURCE_DIR}/lib/win32)
ENDIF(WIN32)

SET(Boost_ADDITIONAL_VERSIONS "1_37")
FIND_PACKAGE(Boost 1.33 REQUIRED)
FIND_PACKAGE(ACE REQUIRED)
FIND_PACKAGE(Coin REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(Qt4 REQUIRED)
SET(QT_USE_QTOPENGL true)

FIND_PACKAGE(Quarter)
IF (NOT QUARTER_FOUND)
   FIND_PACKAGE(SoQt REQUIRED)
   INCLUDE_DIRECTORIES(${SOQT_INCLUDE_DIR})
   ADD_DEFINITIONS(${SOQT_DEFINITIONS})
   LINK_DIRECTORIES(${SOQT_LINK_DIRECTORIES})
ELSE (NOT QUARTER_FOUND)
   INCLUDE_DIRECTORIES(${QUARTER_INCLUDE_DIR})
   ADD_DEFINITIONS(${QUARTER_DEFINITIONS} -DQUARTER_DLL)
   LINK_DIRECTORIES(${QUARTER_LINK_DIRECTORIES})
ENDIF (NOT QUARTER_FOUND)

FIND_PACKAGE(OpenTracker)
FIND_PACKAGE(OpenVideo)

FIND_PACKAGE(TinyXMLMod)
IF(NOT TINY_XML_MOD_FOUND)
  FIND_PACKAGE(TinyXML)
  IF(NOT TINY_XML_FOUND)
    MESSAGE(FATAL_ERROR "neither TinyXML nor TinyXML_Mod could be found")
  ENDIF(NOT TINY_XML_FOUND)
ELSE(NOT TINY_XML_MOD_FOUND)
  ADD_DEFINITIONS(-DUSE_TINYXMLMOD)
  IF(WIN32)
     ADD_DEFINITIONS(-DTINYXML_MOD_DLL)
     ADD_DEFINITIONS(-DOT_DO_NOT_LINK_TINYXML_VIA_PRAGMA_COMMENT_LIB) # This is a workaround for win32
  ENDIF(WIN32)
  SET(TINY_XML_INCLUDE_DIR ${TINY_XML_MOD_INCLUDE_DIR})
  SET(TINY_XML_LIBRARY_DIR ${TINY_XML_MOD_LIBRARY_DIR})
  SET(TINY_XML_LIBRARY ${TINY_XML_MOD_LIBRARIES})
ENDIF(NOT TINY_XML_MOD_FOUND)

SET(CPACK_GENERATOR "TBZ2")
SET(CPACK_SOURCE_GENERATOR "TBZ2")
SET(CPACK_PACKAGE_VERSION_MAJOR "4")
SET(CPACK_PACKAGE_VERSION_MINOR "3")
SET(CPACK_PACKAGE_VERSION_PATCH "0")
SET(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_NAME "studierstube")

# RPM variables:
IF(NOT CMAKE_INSTALL_BINDIR)
SET(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX}/bin)
ENDIF(NOT CMAKE_INSTALL_BINDIR)
IF(NOT CMAKE_INSTALL_LIBDIR)
SET(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
ENDIF(NOT CMAKE_INSTALL_LIBDIR)
IF(NOT CMAKE_INSTALL_DATADIR)
SET(CMAKE_INSTALL_DATADIR ${CMAKE_INSTALL_PREFIX}/share)
ENDIF(NOT CMAKE_INSTALL_DATADIR)
IF(NOT CMAKE_INSTALL_DOCDIR)
SET(CMAKE_INSTALL_DOCDIR ${CMAKE_INSTALL_DATADIR}/doc/packages)
ENDIF(NOT CMAKE_INSTALL_DOCDIR)
IF(NOT CMAKE_INSTALL_MANDIR)
SET(CMAKE_INSTALL_MANDIR ${CMAKE_INSTALL_DATADIR}/man)
ENDIF(NOT CMAKE_INSTALL_MANDIR)

IF(UNIX)
   # configure stb4.pc:
   SET(STB4_PREFIX ${CMAKE_INSTALL_PREFIX})
   SET(STB4_LIBDIR ${CMAKE_INSTALL_LIBDIR})
   SET(STB4_PROJECT_NAME ${CPACK_PACKAGE_NAME})
   SET(STB4_PROJECT_VERSION ${CPACK_PACKAGE_VERSION})
   SET(STB4_PROJECT_DESCRIPTION "Studierstube - The Augmented Reality Environment")
   SET(STB4_PROJECT_LIBNAME ${CPACK_PACKAGE_NAME})
   SET(STB4_PROJECT_DEFINES "")
   
   CONFIGURE_FILE(stb4.pc.in stb4.pc @ONLY)
   INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/stb4.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
   CONFIGURE_FILE(studierstube.spec.in studierstube.spec)
ENDIF(UNIX)

SET(BUILD_SHARED_LIBS ON CACHE DOC "build the shared lib instead of the static?")

IF(WIN32)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
   ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_DEPRECATE)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE_GLOBALS)
   # configure debug and static library postfixes
   IF(BUILD_SHARED_LIBS)
      SET(CMAKE_DEBUG_POSTFIX "d")
   ELSE(BUILD_SHARED_LIBS)
      SET(CMAKE_DEBUG_POSTFIX "d_static")
      SET(CMAKE_RELEASE_POSTFIX "_static")
   ENDIF(BUILD_SHARED_LIBS)
ENDIF(WIN32)

# testing using CTest/Dart:
INCLUDE(CTest)

# ACE
INCLUDE_DIRECTORIES(${ACE_INCLUDE_DIR})
LINK_DIRECTORIES(${ACE_LIBRARY_DIR})

# Coin:
INCLUDE_DIRECTORIES(${COIN_INCLUDE_DIR})
ADD_DEFINITIONS(${COIN_DEFINITIONS})
LINK_DIRECTORIES(${COIN_LINK_DIRECTORIES})

# TinyXML or TinyXMLMod
INCLUDE_DIRECTORIES(${TINY_XML_INCLUDE_DIR})
ADD_DEFINITIONS(${TINY_XML_MOD_DEFINITIONS})
LINK_DIRECTORIES(${TINY_XML_LIBRARY_DIR})

# OpenVideo
IF(OPENVIDEO_FOUND)
   INCLUDE_DIRECTORIES(${OPENVIDEO_INCLUDE_DIR})
   ADD_DEFINITIONS(${OPENVIDEO_DEFINITIONS})
   LINK_DIRECTORIES(${OPENVIDEO_LIBRARY_DIR})
ENDIF()

# OpenTracker
IF(OPENTRACKER_FOUND)
   INCLUDE_DIRECTORIES(${OPENTRACKER_INCLUDE_DIR})
   ADD_DEFINITIONS(${OPENTRACKER_DEFINITIONS})
   LINK_DIRECTORIES(${OPENTRACKER_LIBRARY_DIR})
ENDIF()

# Boost
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

# Studierstube itself
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(doc)

INSTALL(DIRECTORY include DESTINATION ${CMAKE_INSTALL_PREFIX} PATTERN ".svn" EXCLUDE)

# packaging:

SET(CPACK_IGNORE_FILES
  ".depend"
  "/#.*#$"
  "/debian"
  "/doc/doc/"
  "/files.stb"
  "/log"
  "/rpm.stb"
  "/trunk/build/"
  "CMakeCache\\\\.txt"
  "CMakeFiles"
  "CPack.*Config\\\\.cmake"
  "CVS"
  "Makefile"
  "SCons*"
  "\\\\.#"
  "\\\\.a$"
  "\\\\.aux$"
  "\\\\.bz2$"
  "\\\\.dsp$"
  "\\\\.dvi$"
  "\\\\.eps$"
  "\\\\.gz$"
  "\\\\.iv$"
  "\\\\.log$"
  "\\\\.o$"
  "\\\\.out"
  "\\\\.pgm$"
  "\\\\.pro$"
  "\\\\.ps$"
  "\\\\.save"
  "\\\\.so"
  "\\\\.svn"
  "\\\\.swp$"
  "\\\\.tbz$"
  "\\\\.tex$"
  "\\\\.tgz$"
  "\\\\.vcproj$"
  "^/box.cpp"
  "_CPack_Packages"
  "a.out"
  "cgparams$"
  "cmake_install.cmake"
  "cvs_import"
  "install.sh"
  "install_manifest.txt"
  "makedist.sh"
  "moc_"
  "progress.make"
  "~$"
)

SET(CPACK_SOURCE_IGNORE_FILES ${CPACK_IGNORE_FILES})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})
INCLUDE(CPack)
ADD_CUSTOM_TARGET(dist COMMAND make clean && make package_source)
ADD_CUSTOM_TARGET(clean-all COMMAND find \\\( -name CMakeFiles -or -name CMakeCache.txt -or -name Makefile -or -name DartTestfile.txt -or -name 'CPack*.cmake' -or -name _CPack_Packages -or -name '*~' \\\) -prune -exec rm -rf {} '\;')
